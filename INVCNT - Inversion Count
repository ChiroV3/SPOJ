import java.io.*;

public class Main {
static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
static PrintWriter pw =new PrintWriter(new OutputStreamWriter(System.out));
static int max = 10000000;
    public static void main(String[] args) throws IOException {
	// write your code here
        int T = Integer.parseInt(br.readLine());
        while (T-->0){
            br.readLine();
            int N = Integer.parseInt(br.readLine());
            FenwickTree ft =new FenwickTree(N);
            ft.add(Integer.parseInt(br.readLine()),1);
            long ans = 0;
            for (int i=1;i<N;i++){
               int U = Integer.parseInt(br.readLine());
              ans+= ft.rangeQuery(U+1,max);
               ft.add(U,1);
            }
            System.out.println(ans);
        }
        pw.flush();
    }
    static class FenwickTree{
        int[] tree;
        FenwickTree(int[] arr){
            tree = arr.clone();
            for (int i=0;i<arr.length;i++){
                int j =  i+lsb(i);
                if (j<arr.length){
                    tree[j]+=arr[i];
                }
            }

        }
        FenwickTree(int N){
            tree = new int[max+1];
        }
        public int lsb(int i){
            return i&-i;
        }
        public long prefix(int i){
            int sum=0;
            while (i>0){
                sum+=tree[i];
                i&=~lsb(i);
            }
            return sum;
        }
        void add(int indexOnTheTree,int k){
            //point update on the lsb tree
            while (indexOnTheTree<tree.length){
                tree[indexOnTheTree]+=k;
                //find all cel responsiblity for the tree
                indexOnTheTree+=lsb(indexOnTheTree);
            }
        }
        int rangeQuery(int i, int j){
            return (int) (prefix(j)-prefix(i-1));
        }
    }
}
